import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Send, Bot, User, ArrowLeft, Info, AlertTriangle } from 'lucide-react';
//Importing new ChatBot ICON
import doctorAvatar from '@/assets/doctorAvatar.jpg'; 

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

interface ChatBotProps {
  onBack: () => void;
}

const ChatBotExplanation: React.FC = () => {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Bot className="w-5 h-5 mr-2" />
            How the JamesBot Works
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="flex items-center mb-2">
                <Info className="w-4 h-4 mr-2 text-blue-600" />
                <h3 className="font-semibold">Natural Language Understanding</h3>
              </div>
              <p className="text-sm text-gray-600">
                The chatbot uses an advanced AI model to understand the context of your questions, allowing for more natural and helpful conversations.
              </p>
            </div>
            
            <div className="p-4 bg-green-50 rounded-lg">
              <div className="flex items-center mb-2">
                <Bot className="w-4 h-4 mr-2 text-green-600" />
                <h3 className="font-semibold">Powered by Google Gemini</h3>
              </div>
              <p className="text-sm text-gray-600">
                Responses are generated by Google's powerful Gemini model to provide relevant, up-to-date information on kidney health.
              </p>
            </div>
            
            <div className="p-4 bg-purple-50 rounded-lg">
              <div className="flex items-center mb-2">
                <Send className="w-4 h-4 mr-2 text-purple-600" />
                <h3 className="font-semibold">Dynamic & Instant Responses</h3>
              </div>
              <p className="text-sm text-gray-600">
                Get immediate, dynamically generated answers to your specific questions, going far beyond pre-programmed replies.
              </p>
            </div>
            
            <div className="p-4 bg-orange-50 rounded-lg">
              <div className="flex items-center mb-2">
                <AlertTriangle className="w-4 h-4 mr-2 text-orange-600" />
                <h3 className="font-semibold">Safety-Focused</h3>
              </div>
              <p className="text-sm text-gray-600">
                The AI is instructed to provide general health information and will always remind users to consult a healthcare professional for medical advice.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Supported Question Types</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">Test Instructions</span>
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">Health Symptoms</span>
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">Result Interpretation</span>
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">Prevention & Diet Tips</span>
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">General Kidney Health</span>
            <span className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">App Navigation</span>
          </div>
          <div className="mt-4 p-4 bg-gray-50 rounded-lg">
            <h4 className="font-medium mb-2">Example Questions:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>â€¢ "How do I use the kidney test in the app?"</li>
              <li>â€¢ "What are some kidney-friendly foods?"</li>
              <li>â€¢ "Explain what high creatinine means in simple terms."</li>
              <li>â€¢ "What should I do if I see blood in my urine?"</li>
              <li>â€¢ "How can I lower my risk of kidney disease?"</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

const ChatBot: React.FC<ChatBotProps> = ({ onBack }) => {
  // ========================================
  // ðŸ”‘ PASTE YOUR GOOGLE AI STUDIO API KEY HERE
  // ========================================
  // Get your free API key from: https://aistudio.google.com/app/apikey
  const API_KEY = 'AIzaSyCX987vX-vM5t53m2GRjQ_llrI0I7npTo4';
  // ========================================

  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hello! I am JamesBot, your kidney health assistant. How can I help you today?",
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [apiKeyMissing, setApiKeyMissing] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Clean up AI response formatting
  const cleanResponse = (text: string): string => {
    // Remove asterisks and clean up formatting
    let cleaned = text
      .replace(/\*\*/g, '') // Remove bold markers
      .replace(/\*/g, '')   // Remove asterisks
      .replace(/\n{3,}/g, '\n\n') // Max 2 line breaks
      .trim();
    
    return cleaned;
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (API_KEY === 'PASTE_YOUR_API_KEY_HERE' || !API_KEY || API_KEY.trim() === '') {
      setApiKeyMissing(true);
    } else {
      setApiKeyMissing(false);
    }
  }, [API_KEY]);

  // Function to call Gemini API (Free Tier Compatible)
  const getGeminiResponse = async (userMessage: string): Promise<string> => {
    // Using gemini-2.0-flash-exp - latest free tier model
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${API_KEY}`;
    
    const systemPrompt = `You are JamesBot, a friendly kidney health assistant. 

IMPORTANT FORMATTING RULES:
- Keep responses SHORT and CONCISE (3-5 sentences maximum)
- Use simple paragraphs, NO asterisks (*), NO bullet points, NO special formatting
- Write in plain, natural language
- At the end, add ONLY this exact line: "âœ… For personalized advice, please consult our pharmacist, Gabriel Agana.";

Provide helpful but brief information about kidney health.`;
    
    const payload = {
      contents: [
        {
          role: "user",
          parts: [
            {
              text: systemPrompt + "\n\nUser question: " + userMessage
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        topK: 32,
        topP: 0.9,
        maxOutputTokens: 400,
      }
    };

    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error("API Error Details:", errorData);
        console.error("Status:", response.status);
        console.error("Status Text:", response.statusText);
        
        if (response.status === 400) {
          const errorMsg = errorData?.error?.message || "Invalid request";
          return `Configuration error: ${errorMsg}. Please verify your API key is correct and has Generative Language API enabled.`;
        } else if (response.status === 403) {
          return "API key error: Please check that your API key is valid and the Generative Language API is enabled in Google Cloud Console.";
        } else if (response.status === 429) {
          return "Rate limit reached. Please wait a moment before trying again.";
        } else {
          return `API error (${response.status}). Please verify your API key and try again. Check console for details.`;
        }
      }
      
      const result = await response.json();
      console.log("API Response:", result);
      
      let aiResponse = result.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (aiResponse) {
        // Clean the response
        aiResponse = cleanResponse(aiResponse);
        return aiResponse;
      } else {
        console.error("Unexpected response format:", result);
        return "I received an unexpected response. Please try again.";
      }
    } catch (error) {
      console.error("Error fetching Gemini response:", error);
      return "Sorry, I'm having trouble connecting right now. Please check your internet connection and try again.";
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim() || isTyping) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputText;
    setInputText('');
    setIsTyping(true);
    
    const botResponseText = await getGeminiResponse(currentInput);

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: botResponseText,
      isBot: true,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, botMessage]);
    setIsTyping(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <div className="flex items-center mb-6">
        <Button variant="ghost" onClick={onBack} className="mr-4">
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back
        </Button>
        {/* Update the main title */}
        <h1 className="text-3xl font-bold text-gray-900">JamesBot</h1>
      </div>

      <Tabs defaultValue="chat" className="w-full">
        <div className="flex border-b border-gray-200 mb-4">
          <button className="px-4 py-2 font-medium text-blue-600 border-b-2 border-blue-600">
             {/* Replace Bot icon with the avatar image */}
            <img src={doctorAvatar} alt="Chat Icon" className="w-4 h-4 inline mr-2 rounded-full" />
            Chat
          </button>
          <button className="px-4 py-2 font-medium text-gray-600 hover:text-gray-900">
            <Info className="w-4 h-4 inline mr-2" />
            How It Works
          </button>
        </div>
        
        <div>
          <Card className="h-[600px] flex flex-col overflow-hidden">
            <CardHeader className="flex-shrink-0">
              <CardTitle className="flex items-center">
                 {/* Replace Bot icon with the avatar image and update title */}
                <img src={doctorAvatar} alt="JamesBot Avatar" className="w-5 h-5 mr-2 rounded-full" />
                Chat with JamesBot
              </CardTitle>
            </CardHeader>
            
            <CardContent className="flex-1 flex flex-col overflow-hidden">
              {apiKeyMissing && (
                <div className="p-3 mb-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 flex-shrink-0">
                  <div className="flex">
                    <div className="py-1">
                      <AlertTriangle className="h-5 w-5 text-yellow-500 mr-3"/>
                    </div>
                    <div>
                      <p className="font-bold">API Key Required</p>
                      <p className="text-sm">Please add your Google AI Studio API key in the ChatBot.tsx file (line 113). Get your free key at: <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" className="underline">aistudio.google.com</a></p>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="flex-1 overflow-y-auto space-y-4 p-4 bg-gray-50 rounded-lg">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}>
                    <div className={`flex items-start space-x-2 max-w-[80%] ${
                      message.isBot ? 'flex-row' : 'flex-row-reverse space-x-reverse'
                    }`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        message.isBot ? 'bg-blue-100' : 'bg-green-100'
                      }`}>
                        {message.isBot ? (
                          // Replace Bot icon with the avatar image
                          <img src={doctorAvatar} alt="JamesBot Avatar" className="w-full h-full object-cover rounded-full" />
                        ) : (
                          <User className="w-4 h-4 text-green-600" />
                        )}
                      </div>
                      <div className={`p-3 rounded-lg ${
                        message.isBot 
                          ? 'bg-white border border-gray-200' 
                          : 'bg-blue-600 text-white'
                      }`}>
                        <div className="text-sm whitespace-pre-wrap">
                          {message.isBot ? (
                            <>
                              {/* Update logic to handle the new green caution message */}
                              {message.text.split('âœ…').map((part, index) => {
                                if (index === 0) return <span key={index}>{part}</span>;
                                return (
                                  <span key={index} className="block mt-2">
                                    <span className="p-2 bg-green-100 text-green-800 rounded-md inline-block">
                                      âœ… For personalized advice, please consult our pharmacist,{' '}
                                      <a 
                                        href="mailto:gabrielagana123@gmail.com" 
                                        className="font-semibold underline hover:text-green-900"
                                      >
                                        Gabriel Agana
                                      </a>.
                                    </span>
                                  </span>
                                );
                              })}
                            </>
                          ) : (
                            message.text
                          )}
                        </div>
                        {/* ... (timestamp) */}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="flex items-start space-x-2">
                      <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0">
                         {/* Replace Bot icon with the avatar image */}
                        <img src={doctorAvatar} alt="Typing Avatar" className="w-full h-full object-cover rounded-full" />
                      </div>
                      <div className="bg-white border border-gray-200 p-3 rounded-lg">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>
              
              <div className="flex space-x-2">
                <Input
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask me about kidney health, testing, or symptoms..."
                  className="flex-1"
                  disabled={isTyping || apiKeyMissing}
                />
                <Button onClick={handleSendMessage} disabled={!inputText.trim() || isTyping || apiKeyMissing}>
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </Tabs>
    </div>
  );
};

export default ChatBot;
